{"version":3,"file":"crc32.js","sourceRoot":"","sources":["../../../src/utils/crc32.ts"],"names":[],"mappings":";AAAA,yFAAyF;;AAEzF,+CAAuC;AAQvC,sCAAsC;AACtC,IAAI,WAAoC,CAAA;AACxC,SAAS,eAAe,CAAC,IAAyB;IAC9C,yDAAyD;IACzD,IAAI,CAAC,WAAW,EAAE,CAAC;QACf,WAAW,GAAG,CAAC,GAAG,EAAE;YAChB,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,CAAA;YAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;gBAC3B,IAAI,GAAG,GAAG,CAAC,CAAA;gBACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;oBACzB,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAA;gBACxD,CAAC;gBACD,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;YAClB,CAAC;YACD,OAAO,KAAK,CAAA;QAChB,CAAC,CAAC,EAAE,CAAA;IACR,CAAC;IAED,IAAI,GAAG,GAAG,CAAC,CAAC,CAAA,CAAC,6BAA6B;IAC1C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QAC3B,MAAM,QAAQ,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YACvC,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAA;QAC/D,CAAC;IACL,CAAC;SAAM,IAAI,IAAI,YAAY,UAAU,EAAE,CAAC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YACnC,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAA;QAC3D,CAAC;IACL,CAAC;SAAM,CAAC;QACJ,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAA;IACnE,CAAC;IAED,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA,CAAC,uCAAuC;AACnE,CAAC;AACD,0CAA0C;AAE1C,IAAI,mBAA0B,CAAA;AAE9B,IAAI,uBAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;IACxB,gCAAgC;IAChC,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;QACjD,GAAG,EAAE,CAAC,IAAgB,EAAU,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;KAC3D,CAAC,CAAA;AACN,CAAC;KAAM,CAAC;IACJ,4CAA4C;IAC5C,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAA;AAClE,CAAC;AAED,kBAAe,mBAAmB,CAAA","sourcesContent":["// Bundler (Metro/Webpack) will automatically resolve to crc32.web.ts or crc32.native.ts.\n\nimport { Platform } from 'react-native'\n\n// Define the interface first\nexport interface CRC32 {\n    (data: string | Uint8Array): number\n    buf(data: Uint8Array): number\n}\n\n// --- Web CRC32 Calculation Logic ---\nlet webCrcTable: Uint32Array | undefined\nfunction computeWebCrc32(data: string | Uint8Array): number {\n    // Lazily compute the table only on web when first needed\n    if (!webCrcTable) {\n        webCrcTable = (() => {\n            const table = new Uint32Array(256)\n            for (let i = 0; i < 256; ++i) {\n                let crc = i\n                for (let j = 0; j < 8; ++j) {\n                    crc = crc & 1 ? (crc >>> 1) ^ 0xedb88320 : crc >>> 1\n                }\n                table[i] = crc\n            }\n            return table\n        })()\n    }\n\n    let crc = -1 // Initialize with 0xFFFFFFFF\n    if (typeof data === 'string') {\n        const strBytes = new TextEncoder().encode(data)\n        for (let i = 0; i < strBytes.length; ++i) {\n            crc = (crc >>> 8) ^ webCrcTable[(crc ^ strBytes[i]) & 0xff]\n        }\n    } else if (data instanceof Uint8Array) {\n        for (let i = 0; i < data.length; ++i) {\n            crc = (crc >>> 8) ^ webCrcTable[(crc ^ data[i]) & 0xff]\n        }\n    } else {\n        throw new Error('Unsupported data type for CRC32 calculation.')\n    }\n\n    return (crc ^ -1) >>> 0 // Final XOR and ensure unsigned 32-bit\n}\n// --- End Web CRC32 Calculation Logic ---\n\nlet crc32Implementation: CRC32\n\nif (Platform.OS === 'web') {\n    // Assign the web implementation\n    crc32Implementation = Object.assign(computeWebCrc32, {\n        buf: (data: Uint8Array): number => computeWebCrc32(data),\n    })\n} else {\n    // No-op implementation for native platforms\n    crc32Implementation = Object.assign(() => 0, { buf: () => 0 })\n}\n\nexport default crc32Implementation\n"]}