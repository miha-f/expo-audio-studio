{"version":3,"file":"useAudioDevices.js","sourceRoot":"","sources":["../../../src/hooks/useAudioDevices.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState, useId } from 'react'\n\nimport { audioDeviceManager } from '../AudioDeviceManager'\nimport { AudioDevice } from '../ExpoAudioStream.types'\n\n/**\n * React hook for managing audio input devices\n */\nexport function useAudioDevices() {\n    const [devices, setDevices] = useState<AudioDevice[]>([])\n    const [currentDevice, setCurrentDevice] = useState<AudioDevice | null>(null)\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState<Error | null>(null)\n\n    // Generate unique instance ID for debugging\n    const instanceId = useId().replace(/:/g, '').slice(0, 5)\n\n    // Load devices on mount\n    useEffect(() => {\n        let isMounted = true\n\n        const loadDevices = async () => {\n            try {\n                setLoading(true)\n                setError(null)\n\n                // Load available devices\n                const availableDevices =\n                    await audioDeviceManager.getAvailableDevices()\n                if (isMounted) setDevices(availableDevices)\n\n                // Get current device\n                const device = await audioDeviceManager.getCurrentDevice()\n                if (isMounted) setCurrentDevice(device)\n            } catch (err) {\n                audioDeviceManager\n                    .getLogger()\n                    ?.error('Failed to load audio devices:', err)\n                if (isMounted)\n                    setError(\n                        err instanceof Error\n                            ? err\n                            : new Error('Failed to load audio devices')\n                    )\n            } finally {\n                if (isMounted) setLoading(false)\n            }\n        }\n\n        loadDevices()\n\n        // Set up device change listener\n        const removeListener = audioDeviceManager.addDeviceChangeListener(\n            (updatedDevices: AudioDevice[]) => {\n                audioDeviceManager\n                    .getLogger()\n                    ?.debug(\n                        `🎛️ useAudioDevices [${instanceId}] received device change. Count: ${updatedDevices.length}`\n                    )\n\n                if (isMounted) {\n                    setDevices(updatedDevices)\n\n                    // If our current device is no longer available, update it\n                    if (\n                        currentDevice &&\n                        !updatedDevices.some(\n                            (d: AudioDevice) => d.id === currentDevice.id\n                        )\n                    ) {\n                        audioDeviceManager\n                            .getLogger()\n                            ?.debug(\n                                `🎛️ useAudioDevices [${instanceId}] Current device ${currentDevice.id} no longer available, updating`\n                            )\n                        audioDeviceManager\n                            .getCurrentDevice()\n                            .then((newDevice: AudioDevice | null) => {\n                                if (isMounted) {\n                                    setCurrentDevice(newDevice)\n                                }\n                            })\n                    }\n                }\n            }\n        )\n\n        return () => {\n            isMounted = false\n            removeListener()\n        }\n    }, [])\n\n    /**\n     * Select a specific audio input device\n     * @param deviceId The ID of the device to select\n     * @returns Promise resolving to a boolean indicating success\n     */\n    const selectDevice = useCallback(\n        async (deviceId: string): Promise<boolean> => {\n            try {\n                setLoading(true)\n                setError(null)\n\n                const success = await audioDeviceManager.selectDevice(deviceId)\n\n                if (success) {\n                    // Get the updated current device after selection\n                    const device = await audioDeviceManager.getCurrentDevice()\n                    setCurrentDevice(device)\n                }\n\n                return success\n            } catch (err) {\n                audioDeviceManager\n                    .getLogger()\n                    ?.error('Failed to select audio device:', err)\n                setError(\n                    err instanceof Error\n                        ? err\n                        : new Error('Failed to select audio device')\n                )\n                return false\n            } finally {\n                setLoading(false)\n            }\n        },\n        []\n    )\n\n    /**\n     * Reset to the default audio input device\n     * @returns Promise resolving to a boolean indicating success\n     */\n    const resetToDefaultDevice = useCallback(async (): Promise<boolean> => {\n        try {\n            setLoading(true)\n            setError(null)\n\n            const success = await audioDeviceManager.resetToDefaultDevice()\n\n            if (success) {\n                // Get the updated current device after reset\n                const device = await audioDeviceManager.getCurrentDevice()\n                setCurrentDevice(device)\n            }\n\n            return success\n        } catch (err) {\n            audioDeviceManager\n                .getLogger()\n                ?.error('Failed to reset to default audio device:', err)\n            setError(\n                err instanceof Error\n                    ? err\n                    : new Error('Failed to reset to default audio device')\n            )\n            return false\n        } finally {\n            setLoading(false)\n        }\n    }, [])\n\n    /**\n     * Refresh the list of available devices\n     */\n    const refreshDevices = useCallback(async (): Promise<AudioDevice[]> => {\n        try {\n            setLoading(true)\n            setError(null)\n\n            const updatedDevices = await audioDeviceManager.refreshDevices()\n            setDevices(updatedDevices)\n\n            // Also refresh the current device\n            const device = await audioDeviceManager.getCurrentDevice()\n            setCurrentDevice(device)\n\n            return updatedDevices\n        } catch (err) {\n            audioDeviceManager\n                .getLogger()\n                ?.error('Failed to refresh audio devices:', err)\n            setError(\n                err instanceof Error\n                    ? err\n                    : new Error('Failed to refresh audio devices')\n            )\n            return []\n        } finally {\n            setLoading(false)\n        }\n    }, [])\n\n    /**\n     * Initialize device detection\n     * Useful for restarting device detection if it failed initially\n     */\n    const initializeDeviceDetection = useCallback(() => {\n        audioDeviceManager.initializeDeviceDetection()\n    }, [])\n\n    return {\n        devices,\n        currentDevice,\n        loading,\n        error,\n        selectDevice,\n        resetToDefaultDevice,\n        refreshDevices,\n        initializeDeviceDetection,\n    }\n}\n"]}