{"version":3,"file":"concatenateBuffers.js","sourceRoot":"","sources":["../../../src/utils/concatenateBuffers.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,OAAsB,EAAe,EAAE;IACtE,2CAA2C;IAC3C,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,CAAA;IACvD,MAAM,WAAW,GAAG,YAAY,CAAC,MAAM,CACnC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,UAAU,EACxC,CAAC,CACJ,CAAA;IACD,0DAA0D;IAC1D,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAA;IAC1C,mEAAmE;IACnE,IAAI,MAAM,GAAG,CAAC,CAAA;IAEd,KAAK,MAAM,MAAM,IAAI,YAAY,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAA;QAC1C,MAAM,IAAI,MAAM,CAAC,UAAU,CAAA;IAC/B,CAAC;IACD,OAAO,MAAM,CAAC,MAAM,CAAA;AACxB,CAAC,CAAA","sourcesContent":["/**\n * Concatenates an array of ArrayBuffers into a single ArrayBuffer.\n *\n * @param buffers - An array of ArrayBuffers to be concatenated.\n * @returns A single ArrayBuffer containing the concatenated data.\n */\nexport const concatenateBuffers = (buffers: ArrayBuffer[]): ArrayBuffer => {\n    // Filter out any undefined or null buffers\n    const validBuffers = buffers.filter((buffer) => buffer)\n    const totalLength = validBuffers.reduce(\n        (sum, buffer) => sum + buffer.byteLength,\n        0\n    )\n    // Create a new Uint8Array to hold the concatenated result\n    const result = new Uint8Array(totalLength)\n    // Offset to keep track of the current position in the result array\n    let offset = 0\n\n    for (const buffer of validBuffers) {\n        result.set(new Uint8Array(buffer), offset)\n        offset += buffer.byteLength\n    }\n    return result.buffer\n}\n"]}