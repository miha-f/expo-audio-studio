import type { NpmConfig, PackageContext, DependencyUpdate } from "../types/config";
export interface PackageArchiveInfo {
    filename: string;
    path: string;
    size: {
        compressed: number;
        uncompressed: number;
    };
    files: Array<{
        path: string;
        size: number;
    }>;
    created: Date;
    sha: string;
}
export interface PackageManagerService {
    validateAuth(config?: {
        npm: NpmConfig;
    }): Promise<void>;
    publish(context: PackageContext, config?: {
        npm: NpmConfig;
    }): Promise<{
        published: boolean;
        registry: string;
    }>;
    getLatestVersion(packageName: string, config?: {
        npm: NpmConfig;
    }): Promise<string>;
    checkWorkspaceIntegrity(): Promise<boolean>;
    getDependencyUpdates(): Promise<DependencyUpdate[]>;
    updateDependencies(context: PackageContext, dependencies: string[]): Promise<void>;
    pack(context: PackageContext): Promise<PackageArchiveInfo>;
    runScript(context: PackageContext, script: string): Promise<void>;
    install(): Promise<void>;
}
export declare class PackageManagerFactory {
    private static logger;
    static create(packageManager: "npm" | "yarn", config: NpmConfig): PackageManagerService;
}
