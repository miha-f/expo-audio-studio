import type { DryRunOptions, DryRunReport, MonorepoConfig, PackageChanges, PackageContext, ReleaseConfig, ReleaseResult } from "../types/config";
import { Logger } from "../utils/logger";
export declare class ReleaseService {
    private config;
    private logger;
    private git;
    private packageManager;
    private version;
    private changelog;
    private workspace;
    private prompts;
    private integrityService;
    private rootDir;
    constructor(config: MonorepoConfig, logger: Logger);
    releasePackages(packageNames: string[], options: {
        dryRun?: boolean;
        gitPush?: boolean;
        npmPublish?: boolean;
        checkIntegrity?: boolean;
        skipGitCheck?: boolean;
        skipUpstreamTracking?: boolean;
        allowBranch?: boolean;
    }): Promise<Array<ReleaseResult | DryRunReport>>;
    releaseAll(options: {
        dryRun?: boolean;
        gitPush?: boolean;
        npmPublish?: boolean;
    }): Promise<Array<ReleaseResult | DryRunReport>>;
    private releasePackage;
    private validateEnvironment;
    private determineVersion;
    private updateDependencies;
    private getWorkspaceDependencies;
    private runHooks;
    private getEffectiveConfig;
    private matchPackagePattern;
    private createDryRunReport;
    analyzeChanges(packageNames: string[]): Promise<PackageChanges[]>;
    private determineSuggestedVersion;
    private analyzeDependencyUpdates;
    getGitChanges(packageName: string): Promise<Array<{
        message: string;
    }>>;
    previewChangelog(packageName: string): Promise<string>;
    /**
     * Prepares a changelog entry for a new version release.
     *
     * @param context - Package context containing version and path information
     * @param packageConfig - Release configuration for the package
     * @returns Promise<string | undefined> - The final changelog entry content, or undefined if skipped
     */
    prepareChangelogEntry(context: PackageContext, packageConfig: ReleaseConfig): Promise<string | undefined>;
    private backupFiles;
    private validateWithProgress;
    private withTimeout;
    private updateVersion;
    createDryRunPreview(pkg: PackageChanges, options: DryRunOptions): Promise<DryRunReport>;
}
