import { DiffResult } from "simple-git";
import type { GitConfig, PackageContext } from "../types/config";
import { Logger } from "../utils/logger";
export interface GitCommit {
    hash: string;
    date: string;
    message: string;
    body: string | null;
    files: string[];
}
export interface GetCommitsOptions {
    packageName?: string;
    packagePath?: string;
    filterByPath?: boolean;
}
export declare class GitService {
    private git;
    private rootDir;
    private config;
    private logger;
    constructor(config: GitConfig, rootDir: string, logger?: Logger);
    validateStatus(options?: {
        skipUpstreamTracking?: boolean;
        force?: boolean;
        allowBranch?: boolean;
    }): Promise<void>;
    hasChanges(packagePath: string): Promise<boolean>;
    getLastTag(packageName: string): Promise<string>;
    private compareVersions;
    extractFilePaths(diff: DiffResult | undefined): string[];
    getCommitsSinceTag(tag: string, options?: GetCommitsOptions): Promise<GitCommit[]>;
    getTagName(packageName: string, version: string): string;
    createTag(context: PackageContext, force?: boolean): Promise<string>;
    commitChanges(context: PackageContext, changelogPath: string): Promise<void>;
    push(force?: boolean): Promise<void>;
    private getCurrentBranch;
    checkTagExists(tagName: string): Promise<boolean>;
    deleteTag(tagName: string, remote?: boolean): Promise<void>;
    private runGitCommand;
    getCurrentCommitHash(): Promise<string>;
    resetToCommit(commitHash: string): Promise<void>;
    getAllCommits(): Promise<GitCommit[]>;
}
