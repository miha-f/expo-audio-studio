import { Command } from "commander";
import { GitService } from "../core/git";
import { WorkspaceService } from "../core/workspace";
import type { PackageContext, PackageManager, ReleaseConfig } from "../types/config";
import { Logger } from "../utils/logger";
interface ValidateCommandOptions {
    all?: boolean;
    authOnly?: boolean;
    gitOnly?: boolean;
    depsOnly?: boolean;
    versionOnly?: boolean;
    changelogOnly?: boolean;
    publishOnly?: boolean;
    skipAuth?: boolean;
    skipGit?: boolean;
    skipDeps?: boolean;
    skipVersion?: boolean;
    skipChangelog?: boolean;
    skipPublish?: boolean;
    skipUpstreamTracking?: boolean;
    skipPublishCheck?: boolean;
    skipDependencyCheck?: boolean;
    validatePack?: boolean;
    depsReport?: boolean;
    depsReportJson?: boolean;
}
export declare class ValidateCommand {
    private readonly workspaceService;
    private readonly gitService;
    private readonly logger;
    private readonly packageManager;
    constructor(workspaceService: WorkspaceService, gitService: GitService, logger: Logger, packageManager?: PackageManager);
    validate(packages: string[], options: ValidateCommandOptions): Promise<void>;
    private validatePackage;
    private validateGitStatus;
    private validatePackageManager;
    private validateDependencies;
    private validateVersioning;
    private validateChangelog;
    private displayValidationReport;
}
export declare const validateCommand: Command;
export declare function validateChangelogs(packages: PackageContext[], config: ReleaseConfig): Promise<void>;
export {};
