"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Prompts = void 0;
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
const inquirer_1 = __importDefault(require("inquirer"));
const prompts_1 = require("@inquirer/prompts");
class Prompts {
    logger;
    constructor(logger) {
        this.logger = logger;
    }
    async getVersionBump(context, versionService) {
        // Calculate all possible versions
        const currentVersion = context.currentVersion;
        const options = [
            {
                type: "patch",
                label: "Patch",
                version: versionService.determineVersion(context, "patch"),
                description: "Bug fixes",
            },
            {
                type: "minor",
                label: "Minor",
                version: versionService.determineVersion(context, "minor"),
                description: "New features",
            },
            {
                type: "major",
                label: "Major",
                version: versionService.determineVersion(context, "major"),
                description: "Breaking changes",
            },
        ];
        const choices = [
            ...options.map((opt) => ({
                name: `${opt.label} (${opt.description}) ${currentVersion} → ${opt.version}`,
                value: opt.type,
            })),
            { name: "Custom version", value: "custom" },
        ];
        const { bumpType } = await inquirer_1.default.prompt([
            {
                type: "list",
                name: "bumpType",
                message: "Select version bump type:",
                choices,
            },
        ]);
        if (bumpType === "custom") {
            const { version } = await inquirer_1.default.prompt([
                {
                    type: "input",
                    name: "version",
                    message: "Enter custom version:",
                    validate: (input) => {
                        if (/^\d+\.\d+\.\d+(-\w+(\.\d+)?)?$/.test(input)) {
                            return true;
                        }
                        return "Please enter a valid semver version (e.g., 1.2.3 or 1.2.3-beta.1)";
                    },
                },
            ]);
            return version;
        }
        return bumpType;
    }
    async confirmRelease() {
        return (0, prompts_1.confirm)({
            message: "Are you sure you want to proceed with the release?",
            default: false,
        });
    }
    async selectPackages(availablePackages) {
        const { packages } = await inquirer_1.default.prompt([
            {
                type: "checkbox",
                name: "packages",
                message: "Select packages to release:",
                choices: availablePackages,
                validate: (answer) => {
                    if (answer.length < 1) {
                        return "You must choose at least one package.";
                    }
                    return true;
                },
            },
        ]);
        return packages;
    }
    async confirmWorkingDirectory() {
        this.logger.warning("You have uncommitted changes in your working directory.");
        const { confirm } = await inquirer_1.default.prompt([
            {
                type: "confirm",
                name: "confirm",
                message: "Do you want to proceed anyway?",
                default: false,
            },
        ]);
        return confirm;
    }
    async confirmChangelogCreation(packageName) {
        const { confirm } = await inquirer_1.default.prompt([
            {
                type: "confirm",
                name: "confirm",
                message: `No changelog found for ${packageName}. Would you like to create one?`,
                default: true,
            },
        ]);
        return confirm;
    }
    async confirmTagOverwrite(packageName, version) {
        const { confirm } = await inquirer_1.default.prompt([
            {
                type: "confirm",
                name: "confirm",
                message: `Tag ${packageName}@${version} already exists. Would you like to overwrite it?`,
                default: false,
            },
        ]);
        return confirm;
    }
    async confirmChangelogContent(preview) {
        this.logger.info("\nProposed changelog entries:");
        this.logger.info("----------------------------------------");
        this.logger.info(preview);
        this.logger.info("----------------------------------------\n");
        const { confirmed } = await inquirer_1.default.prompt([
            {
                type: "confirm",
                name: "confirmed",
                message: "Would you like to use these changelog entries? (No will open editor for manual entry)",
                default: true,
            },
        ]);
        return confirmed;
    }
    async getManualChangelogEntry(currentChanges) {
        const { content } = await inquirer_1.default.prompt([
            {
                type: "editor",
                name: "content",
                message: "Enter changelog content (opens in your default editor):",
                default: currentChanges ?? `### Added\n\n### Changed\n\n### Fixed\n`,
                postfix: ".md",
                validate: (input) => {
                    if (input.trim().length === 0) {
                        return "Changelog content cannot be empty";
                    }
                    if (!input.includes("###")) {
                        return "Changelog must contain at least one section (e.g., ### Added)";
                    }
                    return true;
                },
            },
        ]);
        return content;
    }
    async confirmDependencyUpdates(packageName, dependencies) {
        if (dependencies.length === 0) {
            return false;
        }
        this.logger.info("\nDependency updates available for", packageName);
        this.logger.info("----------------------------------------");
        for (const dep of dependencies) {
            this.logger.info(`${dep.name}: ${dep.currentVersion} → ${dep.newVersion}`);
        }
        this.logger.info("----------------------------------------\n");
        const { confirmed } = await inquirer_1.default.prompt([
            {
                type: "confirm",
                name: "confirmed",
                message: "Would you like to update these dependencies?",
                default: false,
            },
        ]);
        return confirmed;
    }
}
exports.Prompts = Prompts;
