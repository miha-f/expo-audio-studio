"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogLevel = void 0;
/* eslint-disable no-console */
const chalk_1 = __importDefault(require("chalk"));
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
    LogLevel[LogLevel["WARN"] = 1] = "WARN";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 3] = "DEBUG";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class Logger {
    level;
    silent;
    constructor(options = {}) {
        // Constructor options take precedence over environment variables
        this.silent = options.silent ?? this.getSilentFromEnv() ?? false;
        this.level = options.level ?? this.getLogLevelFromEnv() ?? LogLevel.INFO;
        // Special case for debug flag - can be enabled via options or env
        if (options.debug || process.env.DEBUG) {
            this.level = LogLevel.DEBUG;
        }
    }
    getLogLevelFromEnv() {
        const level = process.env.LOG_LEVEL?.toUpperCase();
        if (level && level in LogLevel) {
            return LogLevel[level];
        }
        return undefined;
    }
    getSilentFromEnv() {
        const silent = process.env.LOG_SILENT;
        if (silent !== undefined) {
            return silent === "true";
        }
        return undefined;
    }
    shouldLog(level) {
        return !this.silent && level <= this.level;
    }
    info(message, ...args) {
        if (this.shouldLog(LogLevel.INFO)) {
            console.log(chalk_1.default.blue("ℹ"), message, ...args);
        }
    }
    success(message, ...args) {
        if (this.shouldLog(LogLevel.INFO)) {
            console.log(chalk_1.default.green("✔"), message, ...args);
        }
    }
    warning(message, ...args) {
        if (this.shouldLog(LogLevel.WARN)) {
            console.log(chalk_1.default.yellow("⚠"), message, ...args);
        }
    }
    error(message, ...args) {
        if (this.shouldLog(LogLevel.ERROR)) {
            console.error(chalk_1.default.red("✖"), message, ...args);
        }
    }
    debug(message, ...args) {
        if (this.shouldLog(LogLevel.DEBUG)) {
            console.log(chalk_1.default.gray("🐛"), message, ...args);
        }
    }
    raw(message, ...args) {
        if (!this.silent) {
            console.log(message, ...args);
        }
    }
    newLine() {
        console.log();
    }
    table(data) {
        if (!this.silent) {
            console.table(data);
        }
    }
    warn(message, ...args) {
        if (this.shouldLog(LogLevel.WARN)) {
            console.warn(chalk_1.default.yellow("⚠"), message, ...args);
        }
    }
}
exports.Logger = Logger;
