{"version":3,"file":"extractMelSpectrogram.js","sourceRoot":"","sources":["../../../src/AudioAnalysis/extractMelSpectrogram.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @experimental This feature is experimental and currently only available on Android.\n * The API may change in future versions. The web implementation is a placeholder.\n */\n\nimport { ExpoAudioStreamModule } from '..'\nimport { isWeb } from '../constants'\nimport {\n    ExtractMelSpectrogramOptions,\n    MelSpectrogram,\n} from './AudioAnalysis.types'\nimport {\n    processAudioBuffer,\n    ProcessedAudioData,\n} from '../utils/audioProcessing'\n\n/**\n * Extracts a mel spectrogram from audio data\n *\n * @experimental This feature is experimental and currently only available on Android.\n * The iOS implementation will throw an \"UNSUPPORTED_PLATFORM\" error.\n * The web implementation is a placeholder that returns dummy data.\n */\nexport async function extractMelSpectrogram(\n    options: ExtractMelSpectrogramOptions\n): Promise<MelSpectrogram> {\n    const {\n        fileUri,\n        arrayBuffer,\n        windowSizeMs,\n        hopLengthMs,\n        nMels,\n        fMin = 0,\n        fMax,\n        windowType = 'hann',\n        normalize = false,\n        logScale = true,\n        decodingOptions,\n        startTimeMs,\n        endTimeMs,\n        logger,\n    } = options\n\n    if (isWeb) {\n        // Create audio context\n        const audioContext = new (window.AudioContext ||\n            (window as any).webkitAudioContext)()\n\n        try {\n            // Process audio data using the existing utility\n            const processedAudio: ProcessedAudioData = await processAudioBuffer(\n                {\n                    arrayBuffer,\n                    fileUri,\n                    targetSampleRate:\n                        decodingOptions?.targetSampleRate || 16000,\n                    targetChannels: decodingOptions?.targetChannels || 1,\n                    normalizeAudio: decodingOptions?.normalizeAudio ?? false,\n                    startTimeMs,\n                    endTimeMs,\n                    audioContext,\n                    logger: options.logger,\n                }\n            )\n\n            // Calculate window and hop size in samples\n            const sampleRate = processedAudio.sampleRate\n            const windowSize = Math.floor((windowSizeMs * sampleRate) / 1000)\n            const hopLength = Math.floor((hopLengthMs * sampleRate) / 1000)\n            const maxFreq = fMax || sampleRate / 2\n\n            // Extract the mel spectrogram from the processed audio\n            const spectrogram = computeMelSpectrogram(\n                processedAudio.channelData,\n                sampleRate,\n                nMels,\n                windowSize,\n                hopLength,\n                fMin,\n                maxFreq,\n                windowType,\n                normalize,\n                logScale\n            )\n\n            const timeSteps = spectrogram.length\n\n            return {\n                spectrogram,\n                sampleRate,\n                nMels,\n                timeSteps,\n                durationMs: processedAudio.durationMs,\n            }\n        } catch (error) {\n            logger?.error('Error extracting mel spectrogram:', error)\n            throw error\n        } finally {\n            // Close the audio context\n            await audioContext.close()\n        }\n    }\n    return ExpoAudioStreamModule.extractMelSpectrogram(options)\n}\n\n/**\n * Computes a mel spectrogram from audio data\n *\n * @experimental This is a placeholder implementation that returns dummy data.\n * The actual implementation will be added in a future version.\n */\nfunction computeMelSpectrogram(\n    audioData: Float32Array,\n    sampleRate: number,\n    nMels: number,\n    windowSize: number,\n    hopLength: number,\n    fMin: number,\n    fMax: number,\n    windowType: 'hann' | 'hamming',\n    normalize: boolean,\n    logScale: boolean\n): number[][] {\n    // Placeholder for the actual implementation\n    // This would include:\n    // 1. Windowing the audio data using the specified window type\n    // 2. Computing the STFT (Short-Time Fourier Transform)\n    // 3. Converting to power spectrogram\n    // 4. Applying mel filterbanks\n    // 5. Taking the logarithm if logScale is true\n    // 6. Normalizing if normalize is true\n\n    // For now, return a dummy implementation\n    const numFrames =\n        Math.floor((audioData.length - windowSize) / hopLength) + 1\n    const spectrogram: number[][] = []\n\n    // Create dummy mel spectrogram data\n    for (let i = 0; i < numFrames; i++) {\n        spectrogram.push(Array(nMels).fill(0))\n    }\n\n    return spectrogram\n}\n"]}