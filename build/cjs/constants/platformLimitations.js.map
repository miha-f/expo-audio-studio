{"version":3,"file":"platformLimitations.js","sourceRoot":"","sources":["../../../src/constants/platformLimitations.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAuCH,0DAEC;AAKD,kDAGC;AAKD,kDAGC;AAKD,kDASC;AAKD,kDAOC;AAKD,0DA2BC;AAjHD,+CAAuC;AAU1B,QAAA,qBAAqB,GAAyC;IACvE,GAAG,EAAE;QACD,kBAAkB,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;QAC9C,kBAAkB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAC5B,KAAK,EAAE;YACH,0DAA0D;YAC1D,8CAA8C;SACjD;KACJ;IACD,OAAO,EAAE;QACL,kBAAkB,EAAE,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,CAAC;QAC1D,kBAAkB,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;QAC/B,KAAK,EAAE,CAAC,qCAAqC,CAAC;KACjD;IACD,GAAG,EAAE;QACD,kBAAkB,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;QAC9C,kBAAkB,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAC5B,KAAK,EAAE;YACH,iDAAiD;YACjD,6CAA6C;SAChD;KACJ;CACJ,CAAA;AAED;;GAEG;AACH,SAAgB,uBAAuB;IACnC,OAAO,6BAAqB,CAAC,uBAAQ,CAAC,EAAE,CAAC,IAAI,6BAAqB,CAAC,GAAG,CAAA;AAC1E,CAAC;AAED;;GAEG;AACH,SAAgB,mBAAmB,CAAC,QAAsB;IACtD,MAAM,YAAY,GAAG,uBAAuB,EAAE,CAAA;IAC9C,OAAO,YAAY,CAAC,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;AAC7D,CAAC;AAED;;GAEG;AACH,SAAgB,mBAAmB,CAAC,QAAkB;IAClD,MAAM,YAAY,GAAG,uBAAuB,EAAE,CAAA;IAC9C,OAAO,YAAY,CAAC,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;AAC7D,CAAC;AAED;;GAEG;AACH,SAAgB,mBAAmB,CAC/B,iBAA+B;IAE/B,IAAI,mBAAmB,CAAC,iBAAiB,CAAC,EAAE,CAAC;QACzC,OAAO,iBAAiB,CAAA;IAC5B,CAAC;IAED,8DAA8D;IAC9D,OAAO,WAAW,CAAA;AACtB,CAAC;AAED;;GAEG;AACH,SAAgB,mBAAmB,CAAC,iBAA2B;IAC3D,IAAI,mBAAmB,CAAC,iBAAiB,CAAC,EAAE,CAAC;QACzC,OAAO,iBAAiB,CAAA;IAC5B,CAAC;IAED,0DAA0D;IAC1D,OAAO,EAAE,CAAA;AACb,CAAC;AAED;;GAEG;AACH,SAAgB,uBAAuB,CAAC,MAAmC;IAIvE,MAAM,QAAQ,GAAa,EAAE,CAAA;IAC7B,MAAM,YAAY,GAAG,uBAAuB,EAAE,CAAA;IAE9C,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,WAAW,CAAA;IAE7C,iCAAiC;IACjC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC;QACjC,MAAM,QAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAA;QAC9C,QAAQ,CAAC,IAAI,CACT,GAAG,QAAQ,wBAAwB,uBAAQ,CAAC,EAAE,WAAW,QAAQ,WAAW,CAC/E,CAAA;QACD,QAAQ,GAAG,QAAQ,CAAA;IACvB,CAAC;IAED,oDAAoD;IACpD,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACtB,QAAQ,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAA;IACxC,CAAC;IAED,OAAO;QACH,QAAQ;QACR,QAAQ;KACX,CAAA;AACL,CAAC","sourcesContent":["/**\n * Platform-specific audio recording limitations and capabilities\n */\n\nimport { Platform } from 'react-native'\n\nimport { EncodingType, BitDepth } from '../ExpoAudioStream.types'\n\nexport interface PlatformCapabilities {\n    supportedEncodings: EncodingType[]\n    supportedBitDepths: BitDepth[]\n    notes: string[]\n}\n\nexport const PLATFORM_CAPABILITIES: Record<string, PlatformCapabilities> = {\n    ios: {\n        supportedEncodings: ['pcm_16bit', 'pcm_32bit'],\n        supportedBitDepths: [16, 32],\n        notes: [\n            '8-bit PCM is not natively supported by iOS AVAudioFormat',\n            'Recording with 8-bit will fallback to 16-bit',\n        ],\n    },\n    android: {\n        supportedEncodings: ['pcm_8bit', 'pcm_16bit', 'pcm_32bit'],\n        supportedBitDepths: [8, 16, 32],\n        notes: ['All PCM formats are fully supported'],\n    },\n    web: {\n        supportedEncodings: ['pcm_16bit', 'pcm_32bit'],\n        supportedBitDepths: [16, 32],\n        notes: [\n            'Web Audio API typically works with 32-bit float',\n            '8-bit is not commonly supported in browsers',\n        ],\n    },\n}\n\n/**\n * Get the current platform's audio capabilities\n */\nexport function getPlatformCapabilities(): PlatformCapabilities {\n    return PLATFORM_CAPABILITIES[Platform.OS] || PLATFORM_CAPABILITIES.web\n}\n\n/**\n * Check if a specific encoding is supported on the current platform\n */\nexport function isEncodingSupported(encoding: EncodingType): boolean {\n    const capabilities = getPlatformCapabilities()\n    return capabilities.supportedEncodings.includes(encoding)\n}\n\n/**\n * Check if a specific bit depth is supported on the current platform\n */\nexport function isBitDepthSupported(bitDepth: BitDepth): boolean {\n    const capabilities = getPlatformCapabilities()\n    return capabilities.supportedBitDepths.includes(bitDepth)\n}\n\n/**\n * Get a fallback encoding if the requested one is not supported\n */\nexport function getFallbackEncoding(\n    requestedEncoding: EncodingType\n): EncodingType {\n    if (isEncodingSupported(requestedEncoding)) {\n        return requestedEncoding\n    }\n\n    // Default fallback is 16-bit PCM (supported on all platforms)\n    return 'pcm_16bit'\n}\n\n/**\n * Get a fallback bit depth if the requested one is not supported\n */\nexport function getFallbackBitDepth(requestedBitDepth: BitDepth): BitDepth {\n    if (isBitDepthSupported(requestedBitDepth)) {\n        return requestedBitDepth\n    }\n\n    // Default fallback is 16-bit (supported on all platforms)\n    return 16\n}\n\n/**\n * Validate and adjust recording configuration based on platform limitations\n */\nexport function validateRecordingConfig(config: { encoding?: EncodingType }): {\n    encoding: EncodingType\n    warnings: string[]\n} {\n    const warnings: string[] = []\n    const capabilities = getPlatformCapabilities()\n\n    let encoding = config.encoding || 'pcm_16bit'\n\n    // Check if encoding is supported\n    if (!isEncodingSupported(encoding)) {\n        const fallback = getFallbackEncoding(encoding)\n        warnings.push(\n            `${encoding} is not supported on ${Platform.OS}. Using ${fallback} instead.`\n        )\n        encoding = fallback\n    }\n\n    // Add platform-specific notes if there were changes\n    if (warnings.length > 0) {\n        warnings.push(...capabilities.notes)\n    }\n\n    return {\n        encoding,\n        warnings,\n    }\n}\n"]}