{"version":3,"file":"events.js","sourceRoot":"","sources":["../../src/events.ts"],"names":[],"mappings":";AAAA,2CAA2C;;;;;AA6B3C,sDAIC;AAKD,4DAIC;AAED,4EAeC;AAzDD,yDAA8E;AAI9E,oFAA2D;AAE3D,MAAM,OAAO,GAAG,IAAI,sCAAkB,CAAC,+BAAqB,CAAC,CAAA;AAqB7D,SAAgB,qBAAqB,CACjC,QAAqD;IAErD,OAAO,OAAO,CAAC,WAAW,CAAoB,WAAW,EAAE,QAAQ,CAAC,CAAA;AACxE,CAAC;AAKD,SAAgB,wBAAwB,CACpC,QAAsD;IAEtD,OAAO,OAAO,CAAC,WAAW,CAAqB,eAAe,EAAE,QAAQ,CAAC,CAAA;AAC7E,CAAC;AAED,SAAgB,gCAAgC,CAC5C,QAAqD;IAErD,oBAAoB;IACpB,OAAO,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAA;IAEvD,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,CACpC,wBAAwB,EAAE,+CAA+C;IACzE,CAAC,KAAK,EAAE,EAAE;QACN,OAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,KAAK,CAAC,CAAA;QAC9D,QAAQ,CAAC,KAAK,CAAC,CAAA;IACnB,CAAC,CACJ,CAAA;IAED,OAAO,YAAY,CAAA;AACvB,CAAC","sourcesContent":["// packages/expo-audio-stream/src/events.ts\n\nimport { LegacyEventEmitter, type EventSubscription } from 'expo-modules-core'\n\nimport { AudioAnalysis } from './AudioAnalysis/AudioAnalysis.types'\nimport { RecordingInterruptionEvent } from './ExpoAudioStream.types'\nimport ExpoAudioStreamModule from './ExpoAudioStreamModule'\n\nconst emitter = new LegacyEventEmitter(ExpoAudioStreamModule)\n\n// Internal event payload from native module\nexport interface AudioEventPayload {\n    encoded?: string\n    buffer?: Float32Array\n    fileUri: string\n    lastEmittedSize: number\n    position: number\n    deltaSize: number\n    totalSize: number\n    mimeType: string\n    streamUuid: string\n    compression?: {\n        data?: string | Blob // Base64 (native) or Float32Array (web) encoded compressed data chunk\n        position: number\n        eventDataSize: number\n        totalSize: number\n    }\n}\n\nexport function addAudioEventListener(\n    listener: (event: AudioEventPayload) => Promise<void>\n): EventSubscription {\n    return emitter.addListener<AudioEventPayload>('AudioData', listener)\n}\n\n// Only aliasing the AudioAnalysis type for the event payload\nexport interface AudioAnalysisEvent extends AudioAnalysis {}\n\nexport function addAudioAnalysisListener(\n    listener: (event: AudioAnalysisEvent) => Promise<void>\n): EventSubscription {\n    return emitter.addListener<AudioAnalysisEvent>('AudioAnalysis', listener)\n}\n\nexport function addRecordingInterruptionListener(\n    listener: (event: RecordingInterruptionEvent) => void\n): EventSubscription {\n    // Add debug logging\n    console.debug('Adding recording interruption listener')\n\n    const subscription = emitter.addListener<RecordingInterruptionEvent>(\n        'onRecordingInterrupted', // Make sure this matches the native event name\n        (event) => {\n            console.debug('Recording interruption event received:', event)\n            listener(event)\n        }\n    )\n\n    return subscription\n}\n"]}