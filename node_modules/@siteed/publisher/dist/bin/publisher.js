#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// packages/publisher/bin/publisher.ts
const commander_1 = require("commander");
const init_1 = require("../src/commands/init");
const release_1 = require("../src/commands/release");
const validate_1 = require("../src/commands/validate");
const changelog_1 = require("../src/commands/changelog");
const integrity_1 = require("../src/commands/integrity");
const package_json_1 = __importDefault(require("../package.json"));
const workspaces_1 = __importDefault(require("../src/commands/workspaces"));
const program = new commander_1.Command();
program
    .name("publisher")
    .description("Monorepo release management tool")
    .version(package_json_1.default.version)
    .option("--cwd <path>", "Working directory to run commands from", process.cwd());
// Add middleware to handle cwd before any command execution
program.hook("preAction", (thisCommand) => {
    const options = thisCommand.opts();
    if (options.cwd) {
        process.chdir(options.cwd);
    }
});
program.addCommand(init_1.initCommand);
program.addCommand(release_1.releaseCommand);
program.addCommand(validate_1.validateCommand);
program.addCommand(workspaces_1.default);
program.addCommand(changelog_1.changelogCommand);
program.addCommand(integrity_1.integrityCommand);
program.parse(process.argv);
