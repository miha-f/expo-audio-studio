"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.integrityCommand = void 0;
const commander_1 = require("commander");
const logger_1 = require("../utils/logger");
const integrity_1 = require("../core/integrity");
const package_manager_1 = require("../core/package-manager");
const config_1 = require("../core/config");
const chalk_1 = __importDefault(require("chalk"));
exports.integrityCommand = new commander_1.Command()
    .name("integrity")
    .description("Check workspace dependency integrity")
    .option("-f, --fix", "Attempt to fix integrity issues")
    .option("-v, --verbose", "Show detailed check information")
    .action(async (options) => {
    const logger = new logger_1.Logger();
    try {
        const config = await (0, config_1.loadConfig)();
        const packageManager = package_manager_1.PackageManagerFactory.create(config.packageManager, config.npm);
        const integrityService = new integrity_1.WorkspaceIntegrityService(packageManager, logger);
        logger.info(chalk_1.default.blue("Checking workspace integrity..."));
        const result = await integrityService.checkWithDetails(options.verbose);
        if (!result.isValid) {
            logger.error("\nIntegrity check failed!");
            result.issues.forEach((issue) => {
                logger.error(`â€¢ ${issue.message}`);
                if (issue.solution) {
                    logger.info(chalk_1.default.gray(`  Solution: ${issue.solution}`));
                }
            });
            if (options.fix) {
                logger.info("\nAttempting to fix issues...");
                const fixed = await integrityService.fix();
                if (fixed) {
                    logger.success("Issues fixed successfully!");
                }
                else {
                    logger.error("Could not automatically fix all issues");
                    process.exit(1);
                }
            }
            else {
                logger.info("\nTip: Run with --fix to attempt automatic fixes");
                process.exit(1);
            }
        }
        else {
            logger.success("Workspace integrity check passed!");
        }
    }
    catch (error) {
        logger.error("Failed to check workspace integrity:", error instanceof Error ? error.message : String(error));
        process.exit(1);
    }
});
