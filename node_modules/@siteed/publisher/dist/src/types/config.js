"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackValidationSchema = exports.MonorepoConfigSchema = exports.ReleaseConfigSchema = exports.PackageConfigSchema = exports.HooksSchema = exports.NpmConfigSchema = exports.GitConfigSchema = void 0;
// packages/publisher/src/types/config.ts
const zod_1 = require("zod");
// Git configuration schema
exports.GitConfigSchema = zod_1.z.object({
    tagPrefix: zod_1.z.string().default(""),
    requireCleanWorkingDirectory: zod_1.z.boolean().default(true),
    requireUpToDate: zod_1.z.boolean().default(true),
    requireUpstreamTracking: zod_1.z.boolean().default(true),
    commit: zod_1.z.boolean().default(true),
    push: zod_1.z.boolean().default(true),
    commitMessage: zod_1.z.string(),
    tag: zod_1.z.boolean().default(true),
    tagMessage: zod_1.z.string().optional(),
    allowedBranches: zod_1.z.array(zod_1.z.string()).optional(),
    remote: zod_1.z.string().default("origin"),
});
// NPM configuration schema
exports.NpmConfigSchema = zod_1.z.object({
    publish: zod_1.z.boolean().default(true),
    registry: zod_1.z.string().default("https://registry.npmjs.org"),
    tag: zod_1.z.string().default("latest"),
    access: zod_1.z.enum(["public", "restricted"]).default("public"),
    otp: zod_1.z.string().optional(),
});
// Hooks configuration schema
exports.HooksSchema = zod_1.z.object({
    preRelease: zod_1.z.function().optional(),
    postRelease: zod_1.z.function().optional(),
    preVersionBump: zod_1.z.function().optional(),
    postVersionBump: zod_1.z.function().optional(),
    preChangelog: zod_1.z.function().optional(),
    postChangelog: zod_1.z.function().optional(),
    prePublish: zod_1.z.function().optional(),
    postPublish: zod_1.z.function().optional(),
});
// Package configuration schema
exports.PackageConfigSchema = zod_1.z.object({
    packageManager: zod_1.z.enum(["npm", "yarn"]).default("yarn"),
    changelogFile: zod_1.z.string().default("CHANGELOG.md"),
    conventionalCommits: zod_1.z.boolean().default(true),
    changelogFormat: zod_1.z
        .enum(["conventional", "keep-a-changelog"])
        .default("conventional"),
    versionStrategy: zod_1.z.enum(["independent", "fixed"]).default("independent"),
    bumpStrategy: zod_1.z.enum(["conventional", "prompt", "auto"]).default("prompt"),
    bumpType: zod_1.z
        .enum([
        "patch",
        "minor",
        "major",
        "prepatch",
        "preminor",
        "premajor",
        "prerelease",
    ])
        .optional(),
    preReleaseId: zod_1.z.string().optional(),
    git: exports.GitConfigSchema,
    npm: exports.NpmConfigSchema,
    hooks: exports.HooksSchema,
    packValidation: zod_1.z
        .object({
        enabled: zod_1.z.boolean().default(true),
        validateFiles: zod_1.z.boolean().default(true),
        validateBuildArtifacts: zod_1.z.boolean().default(true),
        requiredFiles: zod_1.z.array(zod_1.z.string()).optional(),
    })
        .optional()
        .default({
        enabled: true,
        validateFiles: true,
        validateBuildArtifacts: true,
    }),
    repository: zod_1.z
        .object({
        url: zod_1.z.string().optional(),
        directory: zod_1.z.string().optional(),
    })
        .optional(),
    updateDependenciesOnRelease: zod_1.z.boolean().default(false),
    dependencyUpdateStrategy: zod_1.z.enum(["auto", "prompt", "none"]).default("none"),
});
// Release configuration schema (extends package config)
exports.ReleaseConfigSchema = exports.PackageConfigSchema;
// Monorepo configuration schema (extends package config)
exports.MonorepoConfigSchema = exports.PackageConfigSchema.extend({
    packages: zod_1.z.record(zod_1.z.string(), exports.ReleaseConfigSchema.partial()).default({}),
    ignorePackages: zod_1.z.array(zod_1.z.string()).default([]),
    maxConcurrency: zod_1.z.number().default(4),
});
// Add after GitConfigSchema
exports.PackValidationSchema = zod_1.z.object({
    enabled: zod_1.z.boolean().default(true),
    validateFiles: zod_1.z.boolean().default(true),
    validateBuildArtifacts: zod_1.z.boolean().default(true),
    requiredFiles: zod_1.z.array(zod_1.z.string()).optional(),
});
