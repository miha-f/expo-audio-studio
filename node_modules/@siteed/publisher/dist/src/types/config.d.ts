import { z } from "zod";
export type PackageManager = "yarn" | "npm";
export declare const GitConfigSchema: z.ZodObject<{
    tagPrefix: z.ZodDefault<z.ZodString>;
    requireCleanWorkingDirectory: z.ZodDefault<z.ZodBoolean>;
    requireUpToDate: z.ZodDefault<z.ZodBoolean>;
    requireUpstreamTracking: z.ZodDefault<z.ZodBoolean>;
    commit: z.ZodDefault<z.ZodBoolean>;
    push: z.ZodDefault<z.ZodBoolean>;
    commitMessage: z.ZodString;
    tag: z.ZodDefault<z.ZodBoolean>;
    tagMessage: z.ZodOptional<z.ZodString>;
    allowedBranches: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    remote: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    tagPrefix: string;
    requireCleanWorkingDirectory: boolean;
    requireUpToDate: boolean;
    requireUpstreamTracking: boolean;
    commit: boolean;
    push: boolean;
    commitMessage: string;
    tag: boolean;
    remote: string;
    tagMessage?: string | undefined;
    allowedBranches?: string[] | undefined;
}, {
    commitMessage: string;
    tagPrefix?: string | undefined;
    requireCleanWorkingDirectory?: boolean | undefined;
    requireUpToDate?: boolean | undefined;
    requireUpstreamTracking?: boolean | undefined;
    commit?: boolean | undefined;
    push?: boolean | undefined;
    tag?: boolean | undefined;
    tagMessage?: string | undefined;
    allowedBranches?: string[] | undefined;
    remote?: string | undefined;
}>;
export declare const NpmConfigSchema: z.ZodObject<{
    publish: z.ZodDefault<z.ZodBoolean>;
    registry: z.ZodDefault<z.ZodString>;
    tag: z.ZodDefault<z.ZodString>;
    access: z.ZodDefault<z.ZodEnum<["public", "restricted"]>>;
    otp: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    tag: string;
    publish: boolean;
    registry: string;
    access: "public" | "restricted";
    otp?: string | undefined;
}, {
    tag?: string | undefined;
    publish?: boolean | undefined;
    registry?: string | undefined;
    access?: "public" | "restricted" | undefined;
    otp?: string | undefined;
}>;
export declare const HooksSchema: z.ZodObject<{
    preRelease: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    postRelease: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    preVersionBump: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    postVersionBump: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    preChangelog: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    postChangelog: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    prePublish: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    postPublish: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    preRelease?: ((...args: unknown[]) => unknown) | undefined;
    postRelease?: ((...args: unknown[]) => unknown) | undefined;
    preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
    postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
    preChangelog?: ((...args: unknown[]) => unknown) | undefined;
    postChangelog?: ((...args: unknown[]) => unknown) | undefined;
    prePublish?: ((...args: unknown[]) => unknown) | undefined;
    postPublish?: ((...args: unknown[]) => unknown) | undefined;
}, {
    preRelease?: ((...args: unknown[]) => unknown) | undefined;
    postRelease?: ((...args: unknown[]) => unknown) | undefined;
    preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
    postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
    preChangelog?: ((...args: unknown[]) => unknown) | undefined;
    postChangelog?: ((...args: unknown[]) => unknown) | undefined;
    prePublish?: ((...args: unknown[]) => unknown) | undefined;
    postPublish?: ((...args: unknown[]) => unknown) | undefined;
}>;
export declare const PackageConfigSchema: z.ZodObject<{
    packageManager: z.ZodDefault<z.ZodEnum<["npm", "yarn"]>>;
    changelogFile: z.ZodDefault<z.ZodString>;
    conventionalCommits: z.ZodDefault<z.ZodBoolean>;
    changelogFormat: z.ZodDefault<z.ZodEnum<["conventional", "keep-a-changelog"]>>;
    versionStrategy: z.ZodDefault<z.ZodEnum<["independent", "fixed"]>>;
    bumpStrategy: z.ZodDefault<z.ZodEnum<["conventional", "prompt", "auto"]>>;
    bumpType: z.ZodOptional<z.ZodEnum<["patch", "minor", "major", "prepatch", "preminor", "premajor", "prerelease"]>>;
    preReleaseId: z.ZodOptional<z.ZodString>;
    git: z.ZodObject<{
        tagPrefix: z.ZodDefault<z.ZodString>;
        requireCleanWorkingDirectory: z.ZodDefault<z.ZodBoolean>;
        requireUpToDate: z.ZodDefault<z.ZodBoolean>;
        requireUpstreamTracking: z.ZodDefault<z.ZodBoolean>;
        commit: z.ZodDefault<z.ZodBoolean>;
        push: z.ZodDefault<z.ZodBoolean>;
        commitMessage: z.ZodString;
        tag: z.ZodDefault<z.ZodBoolean>;
        tagMessage: z.ZodOptional<z.ZodString>;
        allowedBranches: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        remote: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tagPrefix: string;
        requireCleanWorkingDirectory: boolean;
        requireUpToDate: boolean;
        requireUpstreamTracking: boolean;
        commit: boolean;
        push: boolean;
        commitMessage: string;
        tag: boolean;
        remote: string;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
    }, {
        commitMessage: string;
        tagPrefix?: string | undefined;
        requireCleanWorkingDirectory?: boolean | undefined;
        requireUpToDate?: boolean | undefined;
        requireUpstreamTracking?: boolean | undefined;
        commit?: boolean | undefined;
        push?: boolean | undefined;
        tag?: boolean | undefined;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
        remote?: string | undefined;
    }>;
    npm: z.ZodObject<{
        publish: z.ZodDefault<z.ZodBoolean>;
        registry: z.ZodDefault<z.ZodString>;
        tag: z.ZodDefault<z.ZodString>;
        access: z.ZodDefault<z.ZodEnum<["public", "restricted"]>>;
        otp: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tag: string;
        publish: boolean;
        registry: string;
        access: "public" | "restricted";
        otp?: string | undefined;
    }, {
        tag?: string | undefined;
        publish?: boolean | undefined;
        registry?: string | undefined;
        access?: "public" | "restricted" | undefined;
        otp?: string | undefined;
    }>;
    hooks: z.ZodObject<{
        preRelease: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postRelease: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        preVersionBump: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postVersionBump: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        preChangelog: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postChangelog: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        prePublish: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postPublish: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    }, {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    }>;
    packValidation: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        enabled: z.ZodDefault<z.ZodBoolean>;
        validateFiles: z.ZodDefault<z.ZodBoolean>;
        validateBuildArtifacts: z.ZodDefault<z.ZodBoolean>;
        requiredFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        enabled: boolean;
        validateFiles: boolean;
        validateBuildArtifacts: boolean;
        requiredFiles?: string[] | undefined;
    }, {
        enabled?: boolean | undefined;
        validateFiles?: boolean | undefined;
        validateBuildArtifacts?: boolean | undefined;
        requiredFiles?: string[] | undefined;
    }>>>;
    repository: z.ZodOptional<z.ZodObject<{
        url: z.ZodOptional<z.ZodString>;
        directory: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        url?: string | undefined;
        directory?: string | undefined;
    }, {
        url?: string | undefined;
        directory?: string | undefined;
    }>>;
    updateDependenciesOnRelease: z.ZodDefault<z.ZodBoolean>;
    dependencyUpdateStrategy: z.ZodDefault<z.ZodEnum<["auto", "prompt", "none"]>>;
}, "strip", z.ZodTypeAny, {
    npm: {
        tag: string;
        publish: boolean;
        registry: string;
        access: "public" | "restricted";
        otp?: string | undefined;
    };
    packageManager: "yarn" | "npm";
    changelogFile: string;
    conventionalCommits: boolean;
    changelogFormat: "conventional" | "keep-a-changelog";
    versionStrategy: "independent" | "fixed";
    bumpStrategy: "conventional" | "prompt" | "auto";
    git: {
        tagPrefix: string;
        requireCleanWorkingDirectory: boolean;
        requireUpToDate: boolean;
        requireUpstreamTracking: boolean;
        commit: boolean;
        push: boolean;
        commitMessage: string;
        tag: boolean;
        remote: string;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
    };
    hooks: {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    };
    packValidation: {
        enabled: boolean;
        validateFiles: boolean;
        validateBuildArtifacts: boolean;
        requiredFiles?: string[] | undefined;
    };
    updateDependenciesOnRelease: boolean;
    dependencyUpdateStrategy: "prompt" | "auto" | "none";
    bumpType?: "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | undefined;
    preReleaseId?: string | undefined;
    repository?: {
        url?: string | undefined;
        directory?: string | undefined;
    } | undefined;
}, {
    npm: {
        tag?: string | undefined;
        publish?: boolean | undefined;
        registry?: string | undefined;
        access?: "public" | "restricted" | undefined;
        otp?: string | undefined;
    };
    git: {
        commitMessage: string;
        tagPrefix?: string | undefined;
        requireCleanWorkingDirectory?: boolean | undefined;
        requireUpToDate?: boolean | undefined;
        requireUpstreamTracking?: boolean | undefined;
        commit?: boolean | undefined;
        push?: boolean | undefined;
        tag?: boolean | undefined;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
        remote?: string | undefined;
    };
    hooks: {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    };
    packageManager?: "yarn" | "npm" | undefined;
    changelogFile?: string | undefined;
    conventionalCommits?: boolean | undefined;
    changelogFormat?: "conventional" | "keep-a-changelog" | undefined;
    versionStrategy?: "independent" | "fixed" | undefined;
    bumpStrategy?: "conventional" | "prompt" | "auto" | undefined;
    bumpType?: "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | undefined;
    preReleaseId?: string | undefined;
    packValidation?: {
        enabled?: boolean | undefined;
        validateFiles?: boolean | undefined;
        validateBuildArtifacts?: boolean | undefined;
        requiredFiles?: string[] | undefined;
    } | undefined;
    repository?: {
        url?: string | undefined;
        directory?: string | undefined;
    } | undefined;
    updateDependenciesOnRelease?: boolean | undefined;
    dependencyUpdateStrategy?: "prompt" | "auto" | "none" | undefined;
}>;
export declare const ReleaseConfigSchema: z.ZodObject<{
    packageManager: z.ZodDefault<z.ZodEnum<["npm", "yarn"]>>;
    changelogFile: z.ZodDefault<z.ZodString>;
    conventionalCommits: z.ZodDefault<z.ZodBoolean>;
    changelogFormat: z.ZodDefault<z.ZodEnum<["conventional", "keep-a-changelog"]>>;
    versionStrategy: z.ZodDefault<z.ZodEnum<["independent", "fixed"]>>;
    bumpStrategy: z.ZodDefault<z.ZodEnum<["conventional", "prompt", "auto"]>>;
    bumpType: z.ZodOptional<z.ZodEnum<["patch", "minor", "major", "prepatch", "preminor", "premajor", "prerelease"]>>;
    preReleaseId: z.ZodOptional<z.ZodString>;
    git: z.ZodObject<{
        tagPrefix: z.ZodDefault<z.ZodString>;
        requireCleanWorkingDirectory: z.ZodDefault<z.ZodBoolean>;
        requireUpToDate: z.ZodDefault<z.ZodBoolean>;
        requireUpstreamTracking: z.ZodDefault<z.ZodBoolean>;
        commit: z.ZodDefault<z.ZodBoolean>;
        push: z.ZodDefault<z.ZodBoolean>;
        commitMessage: z.ZodString;
        tag: z.ZodDefault<z.ZodBoolean>;
        tagMessage: z.ZodOptional<z.ZodString>;
        allowedBranches: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        remote: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tagPrefix: string;
        requireCleanWorkingDirectory: boolean;
        requireUpToDate: boolean;
        requireUpstreamTracking: boolean;
        commit: boolean;
        push: boolean;
        commitMessage: string;
        tag: boolean;
        remote: string;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
    }, {
        commitMessage: string;
        tagPrefix?: string | undefined;
        requireCleanWorkingDirectory?: boolean | undefined;
        requireUpToDate?: boolean | undefined;
        requireUpstreamTracking?: boolean | undefined;
        commit?: boolean | undefined;
        push?: boolean | undefined;
        tag?: boolean | undefined;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
        remote?: string | undefined;
    }>;
    npm: z.ZodObject<{
        publish: z.ZodDefault<z.ZodBoolean>;
        registry: z.ZodDefault<z.ZodString>;
        tag: z.ZodDefault<z.ZodString>;
        access: z.ZodDefault<z.ZodEnum<["public", "restricted"]>>;
        otp: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tag: string;
        publish: boolean;
        registry: string;
        access: "public" | "restricted";
        otp?: string | undefined;
    }, {
        tag?: string | undefined;
        publish?: boolean | undefined;
        registry?: string | undefined;
        access?: "public" | "restricted" | undefined;
        otp?: string | undefined;
    }>;
    hooks: z.ZodObject<{
        preRelease: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postRelease: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        preVersionBump: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postVersionBump: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        preChangelog: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postChangelog: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        prePublish: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postPublish: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    }, {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    }>;
    packValidation: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        enabled: z.ZodDefault<z.ZodBoolean>;
        validateFiles: z.ZodDefault<z.ZodBoolean>;
        validateBuildArtifacts: z.ZodDefault<z.ZodBoolean>;
        requiredFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        enabled: boolean;
        validateFiles: boolean;
        validateBuildArtifacts: boolean;
        requiredFiles?: string[] | undefined;
    }, {
        enabled?: boolean | undefined;
        validateFiles?: boolean | undefined;
        validateBuildArtifacts?: boolean | undefined;
        requiredFiles?: string[] | undefined;
    }>>>;
    repository: z.ZodOptional<z.ZodObject<{
        url: z.ZodOptional<z.ZodString>;
        directory: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        url?: string | undefined;
        directory?: string | undefined;
    }, {
        url?: string | undefined;
        directory?: string | undefined;
    }>>;
    updateDependenciesOnRelease: z.ZodDefault<z.ZodBoolean>;
    dependencyUpdateStrategy: z.ZodDefault<z.ZodEnum<["auto", "prompt", "none"]>>;
}, "strip", z.ZodTypeAny, {
    npm: {
        tag: string;
        publish: boolean;
        registry: string;
        access: "public" | "restricted";
        otp?: string | undefined;
    };
    packageManager: "yarn" | "npm";
    changelogFile: string;
    conventionalCommits: boolean;
    changelogFormat: "conventional" | "keep-a-changelog";
    versionStrategy: "independent" | "fixed";
    bumpStrategy: "conventional" | "prompt" | "auto";
    git: {
        tagPrefix: string;
        requireCleanWorkingDirectory: boolean;
        requireUpToDate: boolean;
        requireUpstreamTracking: boolean;
        commit: boolean;
        push: boolean;
        commitMessage: string;
        tag: boolean;
        remote: string;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
    };
    hooks: {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    };
    packValidation: {
        enabled: boolean;
        validateFiles: boolean;
        validateBuildArtifacts: boolean;
        requiredFiles?: string[] | undefined;
    };
    updateDependenciesOnRelease: boolean;
    dependencyUpdateStrategy: "prompt" | "auto" | "none";
    bumpType?: "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | undefined;
    preReleaseId?: string | undefined;
    repository?: {
        url?: string | undefined;
        directory?: string | undefined;
    } | undefined;
}, {
    npm: {
        tag?: string | undefined;
        publish?: boolean | undefined;
        registry?: string | undefined;
        access?: "public" | "restricted" | undefined;
        otp?: string | undefined;
    };
    git: {
        commitMessage: string;
        tagPrefix?: string | undefined;
        requireCleanWorkingDirectory?: boolean | undefined;
        requireUpToDate?: boolean | undefined;
        requireUpstreamTracking?: boolean | undefined;
        commit?: boolean | undefined;
        push?: boolean | undefined;
        tag?: boolean | undefined;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
        remote?: string | undefined;
    };
    hooks: {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    };
    packageManager?: "yarn" | "npm" | undefined;
    changelogFile?: string | undefined;
    conventionalCommits?: boolean | undefined;
    changelogFormat?: "conventional" | "keep-a-changelog" | undefined;
    versionStrategy?: "independent" | "fixed" | undefined;
    bumpStrategy?: "conventional" | "prompt" | "auto" | undefined;
    bumpType?: "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | undefined;
    preReleaseId?: string | undefined;
    packValidation?: {
        enabled?: boolean | undefined;
        validateFiles?: boolean | undefined;
        validateBuildArtifacts?: boolean | undefined;
        requiredFiles?: string[] | undefined;
    } | undefined;
    repository?: {
        url?: string | undefined;
        directory?: string | undefined;
    } | undefined;
    updateDependenciesOnRelease?: boolean | undefined;
    dependencyUpdateStrategy?: "prompt" | "auto" | "none" | undefined;
}>;
export declare const MonorepoConfigSchema: z.ZodObject<z.objectUtil.extendShape<{
    packageManager: z.ZodDefault<z.ZodEnum<["npm", "yarn"]>>;
    changelogFile: z.ZodDefault<z.ZodString>;
    conventionalCommits: z.ZodDefault<z.ZodBoolean>;
    changelogFormat: z.ZodDefault<z.ZodEnum<["conventional", "keep-a-changelog"]>>;
    versionStrategy: z.ZodDefault<z.ZodEnum<["independent", "fixed"]>>;
    bumpStrategy: z.ZodDefault<z.ZodEnum<["conventional", "prompt", "auto"]>>;
    bumpType: z.ZodOptional<z.ZodEnum<["patch", "minor", "major", "prepatch", "preminor", "premajor", "prerelease"]>>;
    preReleaseId: z.ZodOptional<z.ZodString>;
    git: z.ZodObject<{
        tagPrefix: z.ZodDefault<z.ZodString>;
        requireCleanWorkingDirectory: z.ZodDefault<z.ZodBoolean>;
        requireUpToDate: z.ZodDefault<z.ZodBoolean>;
        requireUpstreamTracking: z.ZodDefault<z.ZodBoolean>;
        commit: z.ZodDefault<z.ZodBoolean>;
        push: z.ZodDefault<z.ZodBoolean>;
        commitMessage: z.ZodString;
        tag: z.ZodDefault<z.ZodBoolean>;
        tagMessage: z.ZodOptional<z.ZodString>;
        allowedBranches: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        remote: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tagPrefix: string;
        requireCleanWorkingDirectory: boolean;
        requireUpToDate: boolean;
        requireUpstreamTracking: boolean;
        commit: boolean;
        push: boolean;
        commitMessage: string;
        tag: boolean;
        remote: string;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
    }, {
        commitMessage: string;
        tagPrefix?: string | undefined;
        requireCleanWorkingDirectory?: boolean | undefined;
        requireUpToDate?: boolean | undefined;
        requireUpstreamTracking?: boolean | undefined;
        commit?: boolean | undefined;
        push?: boolean | undefined;
        tag?: boolean | undefined;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
        remote?: string | undefined;
    }>;
    npm: z.ZodObject<{
        publish: z.ZodDefault<z.ZodBoolean>;
        registry: z.ZodDefault<z.ZodString>;
        tag: z.ZodDefault<z.ZodString>;
        access: z.ZodDefault<z.ZodEnum<["public", "restricted"]>>;
        otp: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tag: string;
        publish: boolean;
        registry: string;
        access: "public" | "restricted";
        otp?: string | undefined;
    }, {
        tag?: string | undefined;
        publish?: boolean | undefined;
        registry?: string | undefined;
        access?: "public" | "restricted" | undefined;
        otp?: string | undefined;
    }>;
    hooks: z.ZodObject<{
        preRelease: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postRelease: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        preVersionBump: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postVersionBump: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        preChangelog: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postChangelog: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        prePublish: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        postPublish: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    }, {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    }>;
    packValidation: z.ZodDefault<z.ZodOptional<z.ZodObject<{
        enabled: z.ZodDefault<z.ZodBoolean>;
        validateFiles: z.ZodDefault<z.ZodBoolean>;
        validateBuildArtifacts: z.ZodDefault<z.ZodBoolean>;
        requiredFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        enabled: boolean;
        validateFiles: boolean;
        validateBuildArtifacts: boolean;
        requiredFiles?: string[] | undefined;
    }, {
        enabled?: boolean | undefined;
        validateFiles?: boolean | undefined;
        validateBuildArtifacts?: boolean | undefined;
        requiredFiles?: string[] | undefined;
    }>>>;
    repository: z.ZodOptional<z.ZodObject<{
        url: z.ZodOptional<z.ZodString>;
        directory: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        url?: string | undefined;
        directory?: string | undefined;
    }, {
        url?: string | undefined;
        directory?: string | undefined;
    }>>;
    updateDependenciesOnRelease: z.ZodDefault<z.ZodBoolean>;
    dependencyUpdateStrategy: z.ZodDefault<z.ZodEnum<["auto", "prompt", "none"]>>;
}, {
    packages: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodObject<{
        packageManager: z.ZodOptional<z.ZodDefault<z.ZodEnum<["npm", "yarn"]>>>;
        changelogFile: z.ZodOptional<z.ZodDefault<z.ZodString>>;
        conventionalCommits: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        changelogFormat: z.ZodOptional<z.ZodDefault<z.ZodEnum<["conventional", "keep-a-changelog"]>>>;
        versionStrategy: z.ZodOptional<z.ZodDefault<z.ZodEnum<["independent", "fixed"]>>>;
        bumpStrategy: z.ZodOptional<z.ZodDefault<z.ZodEnum<["conventional", "prompt", "auto"]>>>;
        bumpType: z.ZodOptional<z.ZodOptional<z.ZodEnum<["patch", "minor", "major", "prepatch", "preminor", "premajor", "prerelease"]>>>;
        preReleaseId: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        git: z.ZodOptional<z.ZodObject<{
            tagPrefix: z.ZodDefault<z.ZodString>;
            requireCleanWorkingDirectory: z.ZodDefault<z.ZodBoolean>;
            requireUpToDate: z.ZodDefault<z.ZodBoolean>;
            requireUpstreamTracking: z.ZodDefault<z.ZodBoolean>;
            commit: z.ZodDefault<z.ZodBoolean>;
            push: z.ZodDefault<z.ZodBoolean>;
            commitMessage: z.ZodString;
            tag: z.ZodDefault<z.ZodBoolean>;
            tagMessage: z.ZodOptional<z.ZodString>;
            allowedBranches: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            remote: z.ZodDefault<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            tagPrefix: string;
            requireCleanWorkingDirectory: boolean;
            requireUpToDate: boolean;
            requireUpstreamTracking: boolean;
            commit: boolean;
            push: boolean;
            commitMessage: string;
            tag: boolean;
            remote: string;
            tagMessage?: string | undefined;
            allowedBranches?: string[] | undefined;
        }, {
            commitMessage: string;
            tagPrefix?: string | undefined;
            requireCleanWorkingDirectory?: boolean | undefined;
            requireUpToDate?: boolean | undefined;
            requireUpstreamTracking?: boolean | undefined;
            commit?: boolean | undefined;
            push?: boolean | undefined;
            tag?: boolean | undefined;
            tagMessage?: string | undefined;
            allowedBranches?: string[] | undefined;
            remote?: string | undefined;
        }>>;
        npm: z.ZodOptional<z.ZodObject<{
            publish: z.ZodDefault<z.ZodBoolean>;
            registry: z.ZodDefault<z.ZodString>;
            tag: z.ZodDefault<z.ZodString>;
            access: z.ZodDefault<z.ZodEnum<["public", "restricted"]>>;
            otp: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            tag: string;
            publish: boolean;
            registry: string;
            access: "public" | "restricted";
            otp?: string | undefined;
        }, {
            tag?: string | undefined;
            publish?: boolean | undefined;
            registry?: string | undefined;
            access?: "public" | "restricted" | undefined;
            otp?: string | undefined;
        }>>;
        hooks: z.ZodOptional<z.ZodObject<{
            preRelease: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
            postRelease: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
            preVersionBump: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
            postVersionBump: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
            preChangelog: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
            postChangelog: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
            prePublish: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
            postPublish: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            preRelease?: ((...args: unknown[]) => unknown) | undefined;
            postRelease?: ((...args: unknown[]) => unknown) | undefined;
            preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            preChangelog?: ((...args: unknown[]) => unknown) | undefined;
            postChangelog?: ((...args: unknown[]) => unknown) | undefined;
            prePublish?: ((...args: unknown[]) => unknown) | undefined;
            postPublish?: ((...args: unknown[]) => unknown) | undefined;
        }, {
            preRelease?: ((...args: unknown[]) => unknown) | undefined;
            postRelease?: ((...args: unknown[]) => unknown) | undefined;
            preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            preChangelog?: ((...args: unknown[]) => unknown) | undefined;
            postChangelog?: ((...args: unknown[]) => unknown) | undefined;
            prePublish?: ((...args: unknown[]) => unknown) | undefined;
            postPublish?: ((...args: unknown[]) => unknown) | undefined;
        }>>;
        packValidation: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodObject<{
            enabled: z.ZodDefault<z.ZodBoolean>;
            validateFiles: z.ZodDefault<z.ZodBoolean>;
            validateBuildArtifacts: z.ZodDefault<z.ZodBoolean>;
            requiredFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            enabled: boolean;
            validateFiles: boolean;
            validateBuildArtifacts: boolean;
            requiredFiles?: string[] | undefined;
        }, {
            enabled?: boolean | undefined;
            validateFiles?: boolean | undefined;
            validateBuildArtifacts?: boolean | undefined;
            requiredFiles?: string[] | undefined;
        }>>>>;
        repository: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            url: z.ZodOptional<z.ZodString>;
            directory: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            url?: string | undefined;
            directory?: string | undefined;
        }, {
            url?: string | undefined;
            directory?: string | undefined;
        }>>>;
        updateDependenciesOnRelease: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        dependencyUpdateStrategy: z.ZodOptional<z.ZodDefault<z.ZodEnum<["auto", "prompt", "none"]>>>;
    }, "strip", z.ZodTypeAny, {
        npm?: {
            tag: string;
            publish: boolean;
            registry: string;
            access: "public" | "restricted";
            otp?: string | undefined;
        } | undefined;
        packageManager?: "yarn" | "npm" | undefined;
        changelogFile?: string | undefined;
        conventionalCommits?: boolean | undefined;
        changelogFormat?: "conventional" | "keep-a-changelog" | undefined;
        versionStrategy?: "independent" | "fixed" | undefined;
        bumpStrategy?: "conventional" | "prompt" | "auto" | undefined;
        bumpType?: "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | undefined;
        preReleaseId?: string | undefined;
        git?: {
            tagPrefix: string;
            requireCleanWorkingDirectory: boolean;
            requireUpToDate: boolean;
            requireUpstreamTracking: boolean;
            commit: boolean;
            push: boolean;
            commitMessage: string;
            tag: boolean;
            remote: string;
            tagMessage?: string | undefined;
            allowedBranches?: string[] | undefined;
        } | undefined;
        hooks?: {
            preRelease?: ((...args: unknown[]) => unknown) | undefined;
            postRelease?: ((...args: unknown[]) => unknown) | undefined;
            preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            preChangelog?: ((...args: unknown[]) => unknown) | undefined;
            postChangelog?: ((...args: unknown[]) => unknown) | undefined;
            prePublish?: ((...args: unknown[]) => unknown) | undefined;
            postPublish?: ((...args: unknown[]) => unknown) | undefined;
        } | undefined;
        packValidation?: {
            enabled: boolean;
            validateFiles: boolean;
            validateBuildArtifacts: boolean;
            requiredFiles?: string[] | undefined;
        } | undefined;
        repository?: {
            url?: string | undefined;
            directory?: string | undefined;
        } | undefined;
        updateDependenciesOnRelease?: boolean | undefined;
        dependencyUpdateStrategy?: "prompt" | "auto" | "none" | undefined;
    }, {
        npm?: {
            tag?: string | undefined;
            publish?: boolean | undefined;
            registry?: string | undefined;
            access?: "public" | "restricted" | undefined;
            otp?: string | undefined;
        } | undefined;
        packageManager?: "yarn" | "npm" | undefined;
        changelogFile?: string | undefined;
        conventionalCommits?: boolean | undefined;
        changelogFormat?: "conventional" | "keep-a-changelog" | undefined;
        versionStrategy?: "independent" | "fixed" | undefined;
        bumpStrategy?: "conventional" | "prompt" | "auto" | undefined;
        bumpType?: "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | undefined;
        preReleaseId?: string | undefined;
        git?: {
            commitMessage: string;
            tagPrefix?: string | undefined;
            requireCleanWorkingDirectory?: boolean | undefined;
            requireUpToDate?: boolean | undefined;
            requireUpstreamTracking?: boolean | undefined;
            commit?: boolean | undefined;
            push?: boolean | undefined;
            tag?: boolean | undefined;
            tagMessage?: string | undefined;
            allowedBranches?: string[] | undefined;
            remote?: string | undefined;
        } | undefined;
        hooks?: {
            preRelease?: ((...args: unknown[]) => unknown) | undefined;
            postRelease?: ((...args: unknown[]) => unknown) | undefined;
            preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            preChangelog?: ((...args: unknown[]) => unknown) | undefined;
            postChangelog?: ((...args: unknown[]) => unknown) | undefined;
            prePublish?: ((...args: unknown[]) => unknown) | undefined;
            postPublish?: ((...args: unknown[]) => unknown) | undefined;
        } | undefined;
        packValidation?: {
            enabled?: boolean | undefined;
            validateFiles?: boolean | undefined;
            validateBuildArtifacts?: boolean | undefined;
            requiredFiles?: string[] | undefined;
        } | undefined;
        repository?: {
            url?: string | undefined;
            directory?: string | undefined;
        } | undefined;
        updateDependenciesOnRelease?: boolean | undefined;
        dependencyUpdateStrategy?: "prompt" | "auto" | "none" | undefined;
    }>>>;
    ignorePackages: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    maxConcurrency: z.ZodDefault<z.ZodNumber>;
}>, "strip", z.ZodTypeAny, {
    npm: {
        tag: string;
        publish: boolean;
        registry: string;
        access: "public" | "restricted";
        otp?: string | undefined;
    };
    packageManager: "yarn" | "npm";
    changelogFile: string;
    conventionalCommits: boolean;
    changelogFormat: "conventional" | "keep-a-changelog";
    versionStrategy: "independent" | "fixed";
    bumpStrategy: "conventional" | "prompt" | "auto";
    git: {
        tagPrefix: string;
        requireCleanWorkingDirectory: boolean;
        requireUpToDate: boolean;
        requireUpstreamTracking: boolean;
        commit: boolean;
        push: boolean;
        commitMessage: string;
        tag: boolean;
        remote: string;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
    };
    hooks: {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    };
    packValidation: {
        enabled: boolean;
        validateFiles: boolean;
        validateBuildArtifacts: boolean;
        requiredFiles?: string[] | undefined;
    };
    updateDependenciesOnRelease: boolean;
    dependencyUpdateStrategy: "prompt" | "auto" | "none";
    packages: Record<string, {
        npm?: {
            tag: string;
            publish: boolean;
            registry: string;
            access: "public" | "restricted";
            otp?: string | undefined;
        } | undefined;
        packageManager?: "yarn" | "npm" | undefined;
        changelogFile?: string | undefined;
        conventionalCommits?: boolean | undefined;
        changelogFormat?: "conventional" | "keep-a-changelog" | undefined;
        versionStrategy?: "independent" | "fixed" | undefined;
        bumpStrategy?: "conventional" | "prompt" | "auto" | undefined;
        bumpType?: "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | undefined;
        preReleaseId?: string | undefined;
        git?: {
            tagPrefix: string;
            requireCleanWorkingDirectory: boolean;
            requireUpToDate: boolean;
            requireUpstreamTracking: boolean;
            commit: boolean;
            push: boolean;
            commitMessage: string;
            tag: boolean;
            remote: string;
            tagMessage?: string | undefined;
            allowedBranches?: string[] | undefined;
        } | undefined;
        hooks?: {
            preRelease?: ((...args: unknown[]) => unknown) | undefined;
            postRelease?: ((...args: unknown[]) => unknown) | undefined;
            preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            preChangelog?: ((...args: unknown[]) => unknown) | undefined;
            postChangelog?: ((...args: unknown[]) => unknown) | undefined;
            prePublish?: ((...args: unknown[]) => unknown) | undefined;
            postPublish?: ((...args: unknown[]) => unknown) | undefined;
        } | undefined;
        packValidation?: {
            enabled: boolean;
            validateFiles: boolean;
            validateBuildArtifacts: boolean;
            requiredFiles?: string[] | undefined;
        } | undefined;
        repository?: {
            url?: string | undefined;
            directory?: string | undefined;
        } | undefined;
        updateDependenciesOnRelease?: boolean | undefined;
        dependencyUpdateStrategy?: "prompt" | "auto" | "none" | undefined;
    }>;
    ignorePackages: string[];
    maxConcurrency: number;
    bumpType?: "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | undefined;
    preReleaseId?: string | undefined;
    repository?: {
        url?: string | undefined;
        directory?: string | undefined;
    } | undefined;
}, {
    npm: {
        tag?: string | undefined;
        publish?: boolean | undefined;
        registry?: string | undefined;
        access?: "public" | "restricted" | undefined;
        otp?: string | undefined;
    };
    git: {
        commitMessage: string;
        tagPrefix?: string | undefined;
        requireCleanWorkingDirectory?: boolean | undefined;
        requireUpToDate?: boolean | undefined;
        requireUpstreamTracking?: boolean | undefined;
        commit?: boolean | undefined;
        push?: boolean | undefined;
        tag?: boolean | undefined;
        tagMessage?: string | undefined;
        allowedBranches?: string[] | undefined;
        remote?: string | undefined;
    };
    hooks: {
        preRelease?: ((...args: unknown[]) => unknown) | undefined;
        postRelease?: ((...args: unknown[]) => unknown) | undefined;
        preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
        preChangelog?: ((...args: unknown[]) => unknown) | undefined;
        postChangelog?: ((...args: unknown[]) => unknown) | undefined;
        prePublish?: ((...args: unknown[]) => unknown) | undefined;
        postPublish?: ((...args: unknown[]) => unknown) | undefined;
    };
    packageManager?: "yarn" | "npm" | undefined;
    changelogFile?: string | undefined;
    conventionalCommits?: boolean | undefined;
    changelogFormat?: "conventional" | "keep-a-changelog" | undefined;
    versionStrategy?: "independent" | "fixed" | undefined;
    bumpStrategy?: "conventional" | "prompt" | "auto" | undefined;
    bumpType?: "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | undefined;
    preReleaseId?: string | undefined;
    packValidation?: {
        enabled?: boolean | undefined;
        validateFiles?: boolean | undefined;
        validateBuildArtifacts?: boolean | undefined;
        requiredFiles?: string[] | undefined;
    } | undefined;
    repository?: {
        url?: string | undefined;
        directory?: string | undefined;
    } | undefined;
    updateDependenciesOnRelease?: boolean | undefined;
    dependencyUpdateStrategy?: "prompt" | "auto" | "none" | undefined;
    packages?: Record<string, {
        npm?: {
            tag?: string | undefined;
            publish?: boolean | undefined;
            registry?: string | undefined;
            access?: "public" | "restricted" | undefined;
            otp?: string | undefined;
        } | undefined;
        packageManager?: "yarn" | "npm" | undefined;
        changelogFile?: string | undefined;
        conventionalCommits?: boolean | undefined;
        changelogFormat?: "conventional" | "keep-a-changelog" | undefined;
        versionStrategy?: "independent" | "fixed" | undefined;
        bumpStrategy?: "conventional" | "prompt" | "auto" | undefined;
        bumpType?: "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | undefined;
        preReleaseId?: string | undefined;
        git?: {
            commitMessage: string;
            tagPrefix?: string | undefined;
            requireCleanWorkingDirectory?: boolean | undefined;
            requireUpToDate?: boolean | undefined;
            requireUpstreamTracking?: boolean | undefined;
            commit?: boolean | undefined;
            push?: boolean | undefined;
            tag?: boolean | undefined;
            tagMessage?: string | undefined;
            allowedBranches?: string[] | undefined;
            remote?: string | undefined;
        } | undefined;
        hooks?: {
            preRelease?: ((...args: unknown[]) => unknown) | undefined;
            postRelease?: ((...args: unknown[]) => unknown) | undefined;
            preVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            postVersionBump?: ((...args: unknown[]) => unknown) | undefined;
            preChangelog?: ((...args: unknown[]) => unknown) | undefined;
            postChangelog?: ((...args: unknown[]) => unknown) | undefined;
            prePublish?: ((...args: unknown[]) => unknown) | undefined;
            postPublish?: ((...args: unknown[]) => unknown) | undefined;
        } | undefined;
        packValidation?: {
            enabled?: boolean | undefined;
            validateFiles?: boolean | undefined;
            validateBuildArtifacts?: boolean | undefined;
            requiredFiles?: string[] | undefined;
        } | undefined;
        repository?: {
            url?: string | undefined;
            directory?: string | undefined;
        } | undefined;
        updateDependenciesOnRelease?: boolean | undefined;
        dependencyUpdateStrategy?: "prompt" | "auto" | "none" | undefined;
    }> | undefined;
    ignorePackages?: string[] | undefined;
    maxConcurrency?: number | undefined;
}>;
export type GitConfig = z.infer<typeof GitConfigSchema>;
export type NpmConfig = z.infer<typeof NpmConfigSchema>;
export type Hooks = z.infer<typeof HooksSchema>;
export type PackageConfig = z.infer<typeof PackageConfigSchema>;
export type ReleaseConfig = z.infer<typeof ReleaseConfigSchema>;
export type MonorepoConfig = z.infer<typeof MonorepoConfigSchema>;
export type BumpType = "patch" | "minor" | "major" | "prepatch" | "preminor" | "premajor" | "prerelease" | "custom";
export interface PackageChanges {
    name: string;
    path: string;
    currentVersion: string;
    suggestedVersion: string;
    dependencies: Array<{
        name: string;
        currentVersion: string;
        newVersion: string;
        type: "dependencies" | "devDependencies" | "peerDependencies";
    }>;
    devDependencies: Record<string, string>;
    peerDependencies: Record<string, string>;
    hasGitChanges: boolean;
    changelogEntries: string[];
}
export interface PackageContext {
    name: string;
    path: string;
    currentVersion: string;
    newVersion?: string;
    changelog?: string;
    dependencies?: Record<string, string>;
    devDependencies?: Record<string, string>;
    peerDependencies?: Record<string, string>;
    optionalDependencies?: Record<string, string>;
}
export interface PackageJson {
    name?: string;
    version?: string;
    description?: string;
    main?: string;
    types?: string;
    typings?: string;
    files?: string[];
    scripts?: Record<string, string>;
    dependencies?: Record<string, string>;
    devDependencies?: Record<string, string>;
    peerDependencies?: Record<string, string>;
    optionalDependencies?: Record<string, string>;
    bundledDependencies?: string[];
    engines?: Record<string, string>;
    repository?: {
        type: string;
        url: string;
    };
    author?: string | {
        name: string;
        email?: string;
        url?: string;
    };
    license?: string;
    bugs?: {
        url: string;
        email?: string;
    };
    homepage?: string;
    workspaces?: string[] | {
        packages: string[];
    };
}
export interface ReleaseResult {
    packageName: string;
    version: string;
    changelog: string;
    git: {
        tag: string;
        commit: string;
    };
    npm?: {
        published: boolean;
        registry: string;
    };
}
export type DeepPartial<T> = T extends object ? {
    [P in keyof T]?: DeepPartial<T[P]>;
} : T;
export declare const PackValidationSchema: z.ZodObject<{
    enabled: z.ZodDefault<z.ZodBoolean>;
    validateFiles: z.ZodDefault<z.ZodBoolean>;
    validateBuildArtifacts: z.ZodDefault<z.ZodBoolean>;
    requiredFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    enabled: boolean;
    validateFiles: boolean;
    validateBuildArtifacts: boolean;
    requiredFiles?: string[] | undefined;
}, {
    enabled?: boolean | undefined;
    validateFiles?: boolean | undefined;
    validateBuildArtifacts?: boolean | undefined;
    requiredFiles?: string[] | undefined;
}>;
export type PackValidation = z.infer<typeof PackValidationSchema>;
export interface DependencyUpdate {
    name: string;
    currentVersion: string;
    latestVersion: string;
    type: "dependencies" | "devDependencies" | "peerDependencies";
    isWorkspaceDependency: boolean;
    updateAvailable: boolean;
}
export interface DependencyValidationReport {
    isValid: boolean;
    issues: Array<{
        message: string;
        solution?: string;
        severity: "error" | "warning";
    }>;
    updates: DependencyUpdate[];
    summary: {
        total: number;
        outdated: number;
        workspaceUpdates: number;
        externalUpdates: number;
    };
}
export interface DryRunReport {
    packageName: string;
    currentVersion: string;
    newVersion: string;
    changelog: string;
    git: {
        tag: string;
        commit: string;
        willPush: boolean;
    };
    npm: {
        willPublish: boolean;
        registry: string;
        tag: string;
    };
    dependencies: Array<{
        name: string;
        currentVersion: string;
        newVersion: string;
        type: "dependencies" | "devDependencies" | "peerDependencies";
    }>;
}
export interface DryRunOptions {
    dryRun: boolean;
    gitPush?: boolean;
    publish?: boolean;
    skipGitCheck?: boolean;
    skipUpstreamTracking?: boolean;
    force?: boolean;
    newVersion: string;
    changelog?: string;
    commitHash?: string;
    config?: ReleaseConfig;
}
