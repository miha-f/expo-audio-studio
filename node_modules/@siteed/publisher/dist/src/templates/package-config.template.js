"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.packageConfigTemplate = void 0;
exports.generateDefaultConfig = generateDefaultConfig;
exports.generatePackageConfig = generatePackageConfig;
function generateDefaultConfig(options) {
    if (!options.packageJson.name) {
        throw new Error("Package name is required");
    }
    return {
        packageManager: options.packageManager,
        changelogFile: options.changelogFile ?? "CHANGELOG.md",
        conventionalCommits: options.conventionalCommits ?? true,
        changelogFormat: options.changelogFormat ?? "conventional",
        versionStrategy: options.versionStrategy ?? "independent",
        bumpStrategy: options.bumpStrategy ?? "prompt",
        bumpType: options.bumpType,
        preReleaseId: options.preReleaseId,
        packValidation: {
            enabled: true,
            validateFiles: true,
            validateBuildArtifacts: true,
        },
        git: {
            tagPrefix: ``,
            requireCleanWorkingDirectory: true,
            requireUpToDate: true,
            requireUpstreamTracking: true,
            commit: true,
            push: true,
            commitMessage: `chore(${options.packageJson.name}): release \${version}`,
            tag: true,
            allowedBranches: ["main", "master"],
            remote: "origin",
        },
        npm: {
            publish: options.npm?.publish ?? true,
            registry: "https://registry.npmjs.org",
            tag: "latest",
            access: options.npm?.access ?? "public",
        },
        hooks: {},
        updateDependenciesOnRelease: false,
        dependencyUpdateStrategy: "none",
    };
}
function generatePackageConfig({ options, format = "json", }) {
    const config = generateDefaultConfig(options);
    if (format === "json") {
        return JSON.stringify(config, null, 2);
    }
    return `import type { ReleaseConfig, DeepPartial } from '@siteed/publisher';

const config: DeepPartial<ReleaseConfig> = ${JSON.stringify(config, null, 2)};

export default config;`;
}
// Export a default template string for backward compatibility
exports.packageConfigTemplate = generatePackageConfig({
    options: {
        packageJson: { name: "${packageName}" },
        packageManager: "yarn",
    },
});
