import type { DependencyUpdate, NpmConfig, PackageContext } from "../types/config";
import { Logger } from "../utils/logger";
import { PackageArchiveInfo, PackageManagerService } from "./package-manager";
export declare class YarnService implements PackageManagerService {
    private readonly config;
    private yarnVersion;
    private readonly logger;
    constructor(config: NpmConfig, logger?: Logger);
    private getYarnVersion;
    private execYarnCommand;
    validateAuth(config?: {
        npm: NpmConfig;
    }): Promise<void>;
    publish(context: PackageContext, config?: {
        npm: NpmConfig;
    }): Promise<{
        published: boolean;
        registry: string;
    }>;
    private getPublishArgs;
    private getNpmPublishArgs;
    getLatestVersion(packageName: string, config?: {
        npm: NpmConfig;
    }): Promise<string>;
    checkWorkspaceIntegrity(): Promise<boolean>;
    getWorkspaceVersion(packageName: string): Promise<string>;
    updateDependencies(context: PackageContext, dependencies: string[]): Promise<void>;
    private updateDependenciesWithStrategy;
    pack(context: PackageContext): Promise<PackageArchiveInfo>;
    runScript(context: PackageContext, script: string): Promise<void>;
    install(): Promise<void>;
    private getEffectiveConfig;
    private parseJsonResponse;
    getDependencyUpdates(): Promise<DependencyUpdate[]>;
}
