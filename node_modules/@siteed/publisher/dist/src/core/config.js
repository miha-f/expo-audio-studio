"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfig = loadConfig;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const zod_1 = require("zod");
const package_config_template_1 = require("../templates/package-config.template");
const config_1 = require("../types/config");
const CONFIG_FILES = [
    "publisher.config.js",
    "publisher.config.ts",
    ".publisher.js",
    ".publisher.ts",
    "publisher.config.json",
    ".publisher.json",
];
async function loadConfig() {
    const configPath = findConfigFile();
    if (!configPath) {
        return getDefaultConfig();
    }
    try {
        const extension = path_1.default.extname(configPath);
        let config;
        if (extension === ".json") {
            const jsonContent = await fs_1.default.promises.readFile(configPath, "utf-8");
            config = JSON.parse(jsonContent);
        }
        else if (extension === ".ts") {
            // For TypeScript files, register ts-node with proper configuration
            const tsNode = await Promise.resolve().then(() => __importStar(require("ts-node")));
            tsNode.register({
                transpileOnly: true,
                compilerOptions: {
                    module: "commonjs",
                    moduleResolution: "node",
                    esModuleInterop: true,
                    allowJs: true,
                },
            });
            // Delete require cache to ensure fresh load
            const resolvedPath = require.resolve(configPath);
            delete require.cache[resolvedPath];
            // Load the TypeScript config file
            const tsModule = (await Promise.resolve(`${configPath}`).then(s => __importStar(require(s))));
            config = tsModule.default ?? tsModule;
        }
        else if (extension === ".js") {
            const jsModule = (await Promise.resolve(`${configPath}`).then(s => __importStar(require(s))));
            config = jsModule.default ?? jsModule;
        }
        else {
            throw new Error(`Unsupported config file extension: ${extension}`);
        }
        return validateConfig(config);
    }
    catch (error) {
        if (error instanceof Error) {
            throw new Error(`Failed to load config from ${configPath}: ${error.message}`);
        }
        throw new Error(`Failed to load config from ${configPath}`);
    }
}
function findConfigFile() {
    const cwd = process.cwd();
    for (const fileName of CONFIG_FILES) {
        const filePath = path_1.default.join(cwd, fileName);
        if (fs_1.default.existsSync(filePath)) {
            return filePath;
        }
    }
    return undefined;
}
function validateConfig(config) {
    try {
        const validatedConfig = config_1.MonorepoConfigSchema.parse(config);
        return validatedConfig;
    }
    catch (error) {
        if (error instanceof zod_1.z.ZodError) {
            const issues = error.issues
                .map((issue) => `${issue.path.join(".")}: ${issue.message}`)
                .join("\n");
            throw new Error(`Invalid configuration:\n${issues}`);
        }
        throw error;
    }
}
function getDefaultConfig() {
    const baseConfig = (0, package_config_template_1.generateDefaultConfig)({
        packageJson: { name: "root" },
        packageManager: "yarn",
        conventionalCommits: true,
        changelogFormat: "conventional",
        versionStrategy: "independent",
        bumpStrategy: "prompt",
        npm: {
            publish: true,
            access: "public",
        },
    });
    return {
        ...baseConfig,
        packages: {},
        ignorePackages: [],
        maxConcurrency: 4,
    };
}
