import type { PackageContext, ReleaseConfig } from "../types/config";
import { Logger } from "../utils/logger";
import { WorkspaceService } from "./workspace";
interface ChangelogFormat {
    name: string;
    template: string;
    sectionHeaders: string[];
    versionRegex: RegExp;
    formatVersion: (version: string, date: string) => string;
    formatLinks: (versions: {
        current: string;
        previous: string;
        packageName: string;
    }, config: {
        repoUrl: string;
        tagPrefix: string;
    }) => string[];
    parseConventionalContent?: (content: string) => string;
    versionHeaderPattern: RegExp;
    unreleasedHeaderPattern: RegExp;
    includeEmptySections?: boolean;
    dateFormat: string;
    noChangesMessage: string;
}
export interface PreviewChangelogOptions {
    newVersion: string;
    date?: string;
    conventionalCommits?: boolean;
    format?: "conventional" | "keep-a-changelog";
    includeEmptySections?: boolean;
}
export declare const KEEP_A_CHANGELOG_FORMAT: ChangelogFormat;
export declare const CONVENTIONAL_CHANGELOG_FORMAT: ChangelogFormat;
interface ChangelogConfig extends ReleaseConfig {
    fallbackRepoUrl?: string;
}
export declare class ChangelogService {
    private readonly logger;
    private readonly workspaceService;
    private readonly BULLET_POINTS;
    private readonly COMMIT_TYPES;
    constructor(logger?: Logger, workspaceService?: WorkspaceService);
    private getFormat;
    /**
     * Generates changelog content for a new version based on either conventional commits
     * or the current unreleased section.
     *
     * @param context - Package context containing version and path information
     * @param config - Release configuration specifying changelog format and options
     * @returns Promise<string> - Formatted changelog content for the new version
     *
     * @remarks
     * - For conventional commits: Generates content from git history using conventional-changelog
     * - For non-conventional: Returns empty sections based on the specified format
     * - Content is formatted according to either "conventional" or "keep-a-changelog" format
     */
    generate(context: PackageContext, config: ReleaseConfig): Promise<string>;
    private generateConventionalChangelog;
    /**
     * Updates the changelog file with new version content while maintaining proper formatting and structure.
     *
     * @param context - Package context containing version and path information
     * @param newChanges - New changelog content to be added
     * @param config - Release configuration
     *
     * @remarks
     * The update process:
     * 1. Clears the unreleased section while preserving the header
     * 2. Adds new version section with formatted date
     * 3. Adds new content under the version
     * 4. Deduplicates version entries
     * 5. Updates version comparison links
     *
     * @throws Error if changelog update fails
     */
    update(context: PackageContext, newChanges: string, config: ReleaseConfig): Promise<void>;
    private deduplicateVersionEntries;
    private extractAndDeduplicateEntries;
    getRepositoryUrl(context: PackageContext, config: ChangelogConfig): Promise<string>;
    private updateVersionComparisonLinks;
    private extractExistingLinks;
    /**
     * Validates the changelog file structure and content according to the specified format.
     *
     * @param context - Package context containing version and path information
     * @param config - Release configuration
     *
     * @remarks
     * Validates:
     * - File existence and format
     * - Required sections (Unreleased, etc.)
     * - Version entry format and ordering
     * - Date formats in version headers
     * - Section headers (for keep-a-changelog format)
     *
     * @throws Error if validation fails
     */
    validate(context: PackageContext, config: ReleaseConfig): Promise<void>;
    /**
     * Extracts the "Unreleased" section from the changelog content.
     * @param content - The full changelog content as a string.
     * @returns The content of the "Unreleased" section.
     */
    extractUnreleasedSection(content: string): string;
    /**
     * Compares two semantic version strings.
     * @param a - The first version string.
     * @param b - The second version string.
     * @returns 1 if a > b, -1 if a < b, 0 if equal.
     */
    private compareVersions;
    getUnreleasedChanges(context: PackageContext, config: ReleaseConfig): Promise<string[]>;
    getLatestVersion(context: PackageContext): Promise<string | null>;
    private validateUnreleasedSections;
    private validateVersionEntries;
    /**
     * Previews how the changelog will look after updating to a new version.
     *
     * @param context - Package context containing version information
     * @param config - Release configuration
     * @returns Promise<string> - Formatted preview of the changelog entry
     *
     * @remarks
     * - Uses current unreleased section if available
     * - Falls back to conventional commits if enabled
     * - Formats according to specified changelog format
     * - Includes proper date formatting and section structure
     */
    previewNewVersion(context: PackageContext, config: ReleaseConfig, options: PreviewChangelogOptions): Promise<string>;
    private getEmptyContent;
    formatConventionalContent(content: string): string;
    /**
     * Adds new changes to the Unreleased section of the changelog.
     *
     * @param context - Package context
     * @param changes - Array of change entries to add
     *
     * @remarks
     * - Prevents duplicate entries (case-insensitive comparison)
     * - Maintains proper spacing and formatting
     * - Preserves existing unreleased entries
     * - Handles commit references in change messages
     *
     * @throws Error if updating the changelog fails
     */
    addToUnreleased(context: PackageContext, changes: string[]): Promise<void>;
    private formatVersionEntry;
    private normalizeBulletPoint;
    private parseCommitType;
    private formatKeepAChangelogContent;
    private getEmptyKeepAChangelogSections;
}
export {};
